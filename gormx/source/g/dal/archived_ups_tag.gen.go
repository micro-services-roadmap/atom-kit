// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/wordpress-plus/kit-common/gormx/source/g/model"
)

func newArchivedUpsTag(db *gorm.DB, opts ...gen.DOOption) archivedUpsTag {
	_archivedUpsTag := archivedUpsTag{}

	_archivedUpsTag.archivedUpsTagDo.UseDB(db, opts...)
	_archivedUpsTag.archivedUpsTagDo.UseModel(&model.ArchivedUpsTag{})

	tableName := _archivedUpsTag.archivedUpsTagDo.TableName()
	_archivedUpsTag.ALL = field.NewAsterisk(tableName)
	_archivedUpsTag.TagID = field.NewInt64(tableName, "tag_id")
	_archivedUpsTag.CreateTime = field.NewTime(tableName, "create_time")
	_archivedUpsTag.UpdateTime = field.NewTime(tableName, "update_time")
	_archivedUpsTag.DeleteTime = field.NewTime(tableName, "delete_time")
	_archivedUpsTag.Name = field.NewString(tableName, "name")
	_archivedUpsTag.Count_ = field.NewInt64(tableName, "count")
	_archivedUpsTag.Resp = field.NewString(tableName, "resp")
	_archivedUpsTag.Tip = field.NewString(tableName, "tip")
	_archivedUpsTag.ArchivedUp = archivedUpsTagHasManyArchivedUp{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("ArchivedUp", "model.ArchivedUp"),
		ArchivedUpsTag: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("ArchivedUp.ArchivedUpsTag", "model.ArchivedUpsTag"),
		},
	}

	_archivedUpsTag.fillFieldMap()

	return _archivedUpsTag
}

// archivedUpsTag 关注的UP主分组
type archivedUpsTag struct {
	archivedUpsTagDo

	ALL        field.Asterisk
	TagID      field.Int64 // tagid
	CreateTime field.Time
	UpdateTime field.Time
	DeleteTime field.Time
	Name       field.String // name
	Count_     field.Int64  // count
	Resp       field.String
	Tip        field.String // tip
	ArchivedUp archivedUpsTagHasManyArchivedUp

	fieldMap map[string]field.Expr
}

func (a archivedUpsTag) Table(newTableName string) *archivedUpsTag {
	a.archivedUpsTagDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a archivedUpsTag) As(alias string) *archivedUpsTag {
	a.archivedUpsTagDo.DO = *(a.archivedUpsTagDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *archivedUpsTag) updateTableName(table string) *archivedUpsTag {
	a.ALL = field.NewAsterisk(table)
	a.TagID = field.NewInt64(table, "tag_id")
	a.CreateTime = field.NewTime(table, "create_time")
	a.UpdateTime = field.NewTime(table, "update_time")
	a.DeleteTime = field.NewTime(table, "delete_time")
	a.Name = field.NewString(table, "name")
	a.Count_ = field.NewInt64(table, "count")
	a.Resp = field.NewString(table, "resp")
	a.Tip = field.NewString(table, "tip")

	a.fillFieldMap()

	return a
}

func (a *archivedUpsTag) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *archivedUpsTag) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 9)
	a.fieldMap["tag_id"] = a.TagID
	a.fieldMap["create_time"] = a.CreateTime
	a.fieldMap["update_time"] = a.UpdateTime
	a.fieldMap["delete_time"] = a.DeleteTime
	a.fieldMap["name"] = a.Name
	a.fieldMap["count"] = a.Count_
	a.fieldMap["resp"] = a.Resp
	a.fieldMap["tip"] = a.Tip

}

func (a archivedUpsTag) clone(db *gorm.DB) archivedUpsTag {
	a.archivedUpsTagDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a archivedUpsTag) replaceDB(db *gorm.DB) archivedUpsTag {
	a.archivedUpsTagDo.ReplaceDB(db)
	return a
}

type archivedUpsTagHasManyArchivedUp struct {
	db *gorm.DB

	field.RelationField

	ArchivedUpsTag struct {
		field.RelationField
	}
}

func (a archivedUpsTagHasManyArchivedUp) Where(conds ...field.Expr) *archivedUpsTagHasManyArchivedUp {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a archivedUpsTagHasManyArchivedUp) WithContext(ctx context.Context) *archivedUpsTagHasManyArchivedUp {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a archivedUpsTagHasManyArchivedUp) Session(session *gorm.Session) *archivedUpsTagHasManyArchivedUp {
	a.db = a.db.Session(session)
	return &a
}

func (a archivedUpsTagHasManyArchivedUp) Model(m *model.ArchivedUpsTag) *archivedUpsTagHasManyArchivedUpTx {
	return &archivedUpsTagHasManyArchivedUpTx{a.db.Model(m).Association(a.Name())}
}

type archivedUpsTagHasManyArchivedUpTx struct{ tx *gorm.Association }

func (a archivedUpsTagHasManyArchivedUpTx) Find() (result []*model.ArchivedUp, err error) {
	return result, a.tx.Find(&result)
}

func (a archivedUpsTagHasManyArchivedUpTx) Append(values ...*model.ArchivedUp) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a archivedUpsTagHasManyArchivedUpTx) Replace(values ...*model.ArchivedUp) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a archivedUpsTagHasManyArchivedUpTx) Delete(values ...*model.ArchivedUp) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a archivedUpsTagHasManyArchivedUpTx) Clear() error {
	return a.tx.Clear()
}

func (a archivedUpsTagHasManyArchivedUpTx) Count() int64 {
	return a.tx.Count()
}

type archivedUpsTagDo struct{ gen.DO }

type IArchivedUpsTagDo interface {
	gen.SubQuery
	Debug() IArchivedUpsTagDo
	WithContext(ctx context.Context) IArchivedUpsTagDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IArchivedUpsTagDo
	WriteDB() IArchivedUpsTagDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IArchivedUpsTagDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IArchivedUpsTagDo
	Not(conds ...gen.Condition) IArchivedUpsTagDo
	Or(conds ...gen.Condition) IArchivedUpsTagDo
	Select(conds ...field.Expr) IArchivedUpsTagDo
	Where(conds ...gen.Condition) IArchivedUpsTagDo
	Order(conds ...field.Expr) IArchivedUpsTagDo
	Distinct(cols ...field.Expr) IArchivedUpsTagDo
	Omit(cols ...field.Expr) IArchivedUpsTagDo
	Join(table schema.Tabler, on ...field.Expr) IArchivedUpsTagDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IArchivedUpsTagDo
	RightJoin(table schema.Tabler, on ...field.Expr) IArchivedUpsTagDo
	Group(cols ...field.Expr) IArchivedUpsTagDo
	Having(conds ...gen.Condition) IArchivedUpsTagDo
	Limit(limit int) IArchivedUpsTagDo
	Offset(offset int) IArchivedUpsTagDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IArchivedUpsTagDo
	Unscoped() IArchivedUpsTagDo
	Create(values ...*model.ArchivedUpsTag) error
	CreateInBatches(values []*model.ArchivedUpsTag, batchSize int) error
	Save(values ...*model.ArchivedUpsTag) error
	First() (*model.ArchivedUpsTag, error)
	Take() (*model.ArchivedUpsTag, error)
	Last() (*model.ArchivedUpsTag, error)
	Find() ([]*model.ArchivedUpsTag, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ArchivedUpsTag, err error)
	FindInBatches(result *[]*model.ArchivedUpsTag, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ArchivedUpsTag) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IArchivedUpsTagDo
	Assign(attrs ...field.AssignExpr) IArchivedUpsTagDo
	Joins(fields ...field.RelationField) IArchivedUpsTagDo
	Preload(fields ...field.RelationField) IArchivedUpsTagDo
	FirstOrInit() (*model.ArchivedUpsTag, error)
	FirstOrCreate() (*model.ArchivedUpsTag, error)
	FindByPage(offset int, limit int) (result []*model.ArchivedUpsTag, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IArchivedUpsTagDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	FindNameById(id int) (result int64)
}

// select id from @@table where id=@id
func (a archivedUpsTagDo) FindNameById(id int) (result int64) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("select id from archived_ups_tag where id=? ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	_ = executeSQL

	return
}

func (a archivedUpsTagDo) Debug() IArchivedUpsTagDo {
	return a.withDO(a.DO.Debug())
}

func (a archivedUpsTagDo) WithContext(ctx context.Context) IArchivedUpsTagDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a archivedUpsTagDo) ReadDB() IArchivedUpsTagDo {
	return a.Clauses(dbresolver.Read)
}

func (a archivedUpsTagDo) WriteDB() IArchivedUpsTagDo {
	return a.Clauses(dbresolver.Write)
}

func (a archivedUpsTagDo) Session(config *gorm.Session) IArchivedUpsTagDo {
	return a.withDO(a.DO.Session(config))
}

func (a archivedUpsTagDo) Clauses(conds ...clause.Expression) IArchivedUpsTagDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a archivedUpsTagDo) Returning(value interface{}, columns ...string) IArchivedUpsTagDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a archivedUpsTagDo) Not(conds ...gen.Condition) IArchivedUpsTagDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a archivedUpsTagDo) Or(conds ...gen.Condition) IArchivedUpsTagDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a archivedUpsTagDo) Select(conds ...field.Expr) IArchivedUpsTagDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a archivedUpsTagDo) Where(conds ...gen.Condition) IArchivedUpsTagDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a archivedUpsTagDo) Order(conds ...field.Expr) IArchivedUpsTagDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a archivedUpsTagDo) Distinct(cols ...field.Expr) IArchivedUpsTagDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a archivedUpsTagDo) Omit(cols ...field.Expr) IArchivedUpsTagDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a archivedUpsTagDo) Join(table schema.Tabler, on ...field.Expr) IArchivedUpsTagDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a archivedUpsTagDo) LeftJoin(table schema.Tabler, on ...field.Expr) IArchivedUpsTagDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a archivedUpsTagDo) RightJoin(table schema.Tabler, on ...field.Expr) IArchivedUpsTagDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a archivedUpsTagDo) Group(cols ...field.Expr) IArchivedUpsTagDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a archivedUpsTagDo) Having(conds ...gen.Condition) IArchivedUpsTagDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a archivedUpsTagDo) Limit(limit int) IArchivedUpsTagDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a archivedUpsTagDo) Offset(offset int) IArchivedUpsTagDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a archivedUpsTagDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IArchivedUpsTagDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a archivedUpsTagDo) Unscoped() IArchivedUpsTagDo {
	return a.withDO(a.DO.Unscoped())
}

func (a archivedUpsTagDo) Create(values ...*model.ArchivedUpsTag) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a archivedUpsTagDo) CreateInBatches(values []*model.ArchivedUpsTag, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a archivedUpsTagDo) Save(values ...*model.ArchivedUpsTag) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a archivedUpsTagDo) First() (*model.ArchivedUpsTag, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArchivedUpsTag), nil
	}
}

func (a archivedUpsTagDo) Take() (*model.ArchivedUpsTag, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArchivedUpsTag), nil
	}
}

func (a archivedUpsTagDo) Last() (*model.ArchivedUpsTag, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArchivedUpsTag), nil
	}
}

func (a archivedUpsTagDo) Find() ([]*model.ArchivedUpsTag, error) {
	result, err := a.DO.Find()
	return result.([]*model.ArchivedUpsTag), err
}

func (a archivedUpsTagDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ArchivedUpsTag, err error) {
	buf := make([]*model.ArchivedUpsTag, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a archivedUpsTagDo) FindInBatches(result *[]*model.ArchivedUpsTag, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a archivedUpsTagDo) Attrs(attrs ...field.AssignExpr) IArchivedUpsTagDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a archivedUpsTagDo) Assign(attrs ...field.AssignExpr) IArchivedUpsTagDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a archivedUpsTagDo) Joins(fields ...field.RelationField) IArchivedUpsTagDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a archivedUpsTagDo) Preload(fields ...field.RelationField) IArchivedUpsTagDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a archivedUpsTagDo) FirstOrInit() (*model.ArchivedUpsTag, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArchivedUpsTag), nil
	}
}

func (a archivedUpsTagDo) FirstOrCreate() (*model.ArchivedUpsTag, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArchivedUpsTag), nil
	}
}

func (a archivedUpsTagDo) FindByPage(offset int, limit int) (result []*model.ArchivedUpsTag, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a archivedUpsTagDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a archivedUpsTagDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a archivedUpsTagDo) Delete(models ...*model.ArchivedUpsTag) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *archivedUpsTagDo) withDO(do gen.Dao) *archivedUpsTagDo {
	a.DO = *do.(*gen.DO)
	return a
}
